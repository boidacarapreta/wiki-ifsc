#cloud-config
hostname: coreos-0
ssh_authorized_keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDm6baOg9AXEsNZCDwmIr32SEwfhoVvmT4WrsfMtJlPD5zfpGydC0oNbBtmB7DbwANSs79hCgsQw2SGgOumUQMPTCjdrK3DgpUuHZHnLbf/LdOvaM34HzVEwSJ8E24H3272ypdW9LxpNfDp3lwVv9UHQqc1pZ69nQkkEOq7OMozQD8inWDLhMfdXfkGtr8LwYV+Cq9H0jy+V5yAYkC5wMwf/uIVTwfocPZ4wn0iQTj6l/JVInb6A1RsxfhSbHtU+AXYxVa5zi/KJFSExkaIiuKYdTTN6/4jRJuwld7SdJ+f4c8Vh481WqisJCF339lGcVbfoTGdk7JwRNj/rWJrzBCZelVJxohB9eMC5yG6HFWQTb3CwboR6trQ0BK/pcwQMx90UlA8LEdNrGziO8djZIYvT4SWoZEwTe7Wq6s++YNkjs0Jjca+nK0xbci10zgApDUhWhArBdF0hIjVK22Q3g0HizpiwzTohcQfvMyIgrUmXXPAIbFF6Zit57PxzNQn9zHjz+eyznlIh119TnnbRnY7rYL9BT1sEqmb4lpl/H5H4iSfvVLsXrhWu3tXAkBFV1mUcSznfnjUJvLLPVY/p8dc5k4Ux57pOhuhwaGUC2UVjPGWRZw3hvcnqVESOPw8PduP/RWRz6xRH5BgO6YKRvvRhMtTp5+K7CSxgpBuCUcN3Q== boidacarapreta@gmail.com
write_files:
  - path: /etc/hosts
    permissions: 0644
    owner: root
    content: |
      127.0.0.1 localhost
      200.135.37.93 coreos-0 kube-controller kube-apiserver
      200.135.37.94 coreos-1
      200.135.37.95 coreos-2
  - path: /etc/systemd/network/en-ip.network
    permissions: 0644
    owner: root
    content: |
      [Match]
      Name=en*
      [Network]
      DNS=200.135.37.72
      DNS=200.135.37.65
      Address=200.135.37.93/24
      Gateway=200.135.37.126
  - path: /etc/systemd/timesyncd.conf
    permissions: 0644
    owner: root
    content: |
      [Time]
      NTP=pool.ntp.br ntp.ufsc.br ntp.cais.rnp.br
  - path: /etc/flannel/options.env
    permissions: 0644
    owner: root
    content: |
      FLANNELD_IFACE=200.135.37.93
      FLANNELD_ETCD_ENDPOINTS=http://200.135.37.93:2379,http://200.135.37.94:2379,http://200.135.37.95:2379
  - path: /etc/kubernetes/manifests/kube-controller.yaml
    permissions: 0644
    owner: root
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-controller
      spec:
        hostNetwork: true
        volumes:
          - name: "etc-kubernetes"
            hostPath:
              path: "/etc/kubernetes"
          - name: ssl-certs-kubernetes
            hostPath:
              path: /etc/kubernetes/ssl
          - name: "ssl-certs-host"
            hostPath:
              path: "/usr/share/ca-certificates"
          - name: "var-run-kubernetes"
            hostPath:
              path: "/var/run/kubernetes"
          - name: "usr"
            hostPath:
              path: "/usr"
          - name: "lib64"
            hostPath:
              path: "/lib64"
        containers:
          - name: kube-apiserver
            image: gcr.io/google_containers/hyperkube:v1.3.0
            command:
              - /hyperkube
              - apiserver
              - --allow-privileged=true
              - --bind-address=0.0.0.0
              - --secure-port=443
              - --etcd-servers=http://200.135.37.93:2379,http://200.135.37.94:2379,http://200.135.37.95:2379
              - --service-cluster-ip-range=10.1.0.0/16
              - --admission-control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota
              - --service-account-key-file=/etc/kubernetes/ssl/apiserver-key.pem
              - --tls-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
              - --tls-cert-file=/etc/kubernetes/ssl/apiserver.pem
              - --client-ca-file=/etc/kubernetes/ssl/ca.pem
              - --logtostderr=true
            ports:
              - containerPort: 443
                hostPort: 443
                name: https
              - containerPort: 8080
                hostPort: 8080
                name: local
            volumeMounts:
              - mountPath: /etc/kubernetes/ssl
                name: ssl-certs-kubernetes
                readOnly: true
              - mountPath: /etc/ssl/certs
                name: ssl-certs-host
                readOnly: true
              - mountPath: /etc/kubernetes
                name: "etc-kubernetes"
              - mountPath: /var/run/kubernetes
                name: "var-run-kubernetes"
          - name: kube-controller-manager
            image: gcr.io/google_containers/hyperkube:v1.3.0
            command:
            - /hyperkube
            - controller-manager
            - --master=http://127.0.0.1:8080
            - --service-account-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
            - --root-ca-file=/etc/kubernetes/ssl/ca.pem
            livenessProbe:
              httpGet:
                host: 127.0.0.1
                path: /healthz
                port: 10252s
              initialDelaySeconds: 15
              timeoutSeconds: 1
            volumeMounts:
            - mountPath: /etc/kubernetes/ssl
              name: ssl-certs-kubernetes
              readOnly: true
            - mountPath: /etc/ssl/certs
              name: ssl-certs-host
              readOnly: true
          - name: kube-scheduler
            image: gcr.io/google_containers/hyperkube:v1.3.0
            command:
            - /hyperkube
            - scheduler
            - --master=http://127.0.0.1:8080
            livenessProbe:
              httpGet:
                host: 127.0.0.1
                path: /healthz
                port: 10251
              initialDelaySeconds: 15
              timeoutSeconds: 1
          - name: kube-proxy
            image: gcr.io/google_containers/hyperkube:v1.3.0
            command:
            - /hyperkube
            - proxy
            - --master=http://127.0.0.1:8080
            - --proxy-mode=iptables
            securityContext:
              privileged: true
            volumeMounts:
            - mountPath: /etc/ssl/certs
              name: ssl-certs-host
              readOnly: true
  - path: /etc/kubernetes/manifests/kube-dns.yaml
    permissions: 0644
    owner: root
    content: |
      apiVersion: v1
      kind: Service
      metadata:
        name: kube-dns
        namespace: kube-system
        labels:
          k8s-app: kube-dns
          kubernetes.io/cluster-service: "true"
          kubernetes.io/name: "KubeDNS"
      spec:
        selector:
          k8s-app: kube-dns
        clusterIP: 10.1.0.2
        ports:
        - name: dns
          port: 53
          protocol: UDP
        - name: dns-tcp
          port: 53
          protocol: TCP
      ---
      apiVersion: v1
      kind: ReplicationController
      metadata:
        name: kube-dns-v11
        namespace: kube-system
        labels:
          k8s-app: kube-dns
          version: v11
          kubernetes.io/cluster-service: "true"
      spec:
        replicas: 1
        selector:
          k8s-app: kube-dns
          version: v11
        template:
          metadata:
            labels:
              k8s-app: kube-dns
              version: v11
              kubernetes.io/cluster-service: "true"
          spec:
            containers:
            - name: etcd
              image: gcr.io/google_containers/etcd-amd64:2.2.1
              resources:
                limits:
                  cpu: 100m
                  memory: 500Mi
                requests:
                  cpu: 100m
                  memory: 50Mi
              command:
              - /usr/local/bin/etcd
              - -data-dir
              - /var/etcd/data
              - -listen-client-urls
              - http://127.0.0.1:2379,http://127.0.0.1:4001
              - -advertise-client-urls
              - http://127.0.0.1:2379,http://127.0.0.1:4001
              - -initial-cluster-token
              - skydns-etcd
              volumeMounts:
              - name: etcd-storage
                mountPath: /var/etcd/data
            - name: kube2sky
              image: gcr.io/google_containers/kube2sky:1.14
              resources:
                limits:
                  cpu: 100m
                  memory: 200Mi
                requests:
                  cpu: 100m
                  memory: 50Mi
              livenessProbe:
                httpGet:
                  path: /healthz
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 60
                timeoutSeconds: 5
                successThreshold: 1
                failureThreshold: 5
              readinessProbe:
                httpGet:
                  path: /readiness
                  port: 8081
                  scheme: HTTP
                initialDelaySeconds: 30
                timeoutSeconds: 5
              args:
              # command = "/kube2sky"
              - --domain=cluster.local
            - name: skydns
              image: gcr.io/google_containers/skydns:2015-10-13-8c72f8c
              resources:
                limits:
                  cpu: 100m
                  memory: 200Mi
                requests:
                  cpu: 100m
                  memory: 50Mi
              args:
              # command = "/skydns"
              - -machines=http://127.0.0.1:4001
              - -addr=0.0.0.0:53
              - -ns-rotate=false
              - -domain=cluster.local.
              ports:
              - containerPort: 53
                name: dns
                protocol: UDP
              - containerPort: 53
                name: dns-tcp
                protocol: TCP
            - name: healthz
              image: gcr.io/google_containers/exechealthz:1.0
              resources:
                limits:
                  cpu: 10m
                  memory: 20Mi
                requests:
                  cpu: 10m
                  memory: 20Mi
              args:
              - -cmd=nslookup kubernetes.default.svc.cluster.local 127.0.0.1 >/dev/null
              - -port=8080
              ports:
              - containerPort: 8080
                protocol: TCP
            volumes:
            - name: etcd-storage
              emptyDir: {}
            dnsPolicy: Default
  - path: /etc/kubernetes/manifests/kube-ui.yaml
    permissions: 0644
    owner: root
    content: |
      kind: Deployment
      apiVersion: extensions/v1beta1
      metadata:
        labels:
          app: kubernetes-dashboard
          version: v1.1.0
        name: kubernetes-dashboard
        namespace: kube-system
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: kubernetes-dashboard
        template:
          metadata:
            labels:
              app: kubernetes-dashboard
          spec:
            containers:
            - name: kubernetes-dashboard
              image: gcr.io/google_containers/kubernetes-dashboard-amd64:v1.1.0
              imagePullPolicy: Always
              ports:
              - containerPort: 9090
                protocol: TCP
              args:
              #  - --apiserver-host=https://200.135.37.93:443
              livenessProbe:
                httpGet:
                  path: /
                  port: 9090
                initialDelaySeconds: 30
                timeoutSeconds: 30
      ---
      kind: Service
      apiVersion: v1
      metadata:
        labels:
          app: kubernetes-dashboard
        name: kubernetes-dashboard
        namespace: kube-system
      spec:
        type: NodePort
        ports:
        - port: 80
          targetPort: 9090
        selector:
          app: kubernetes-dashboard
coreos:
  units:
    - name: systemd-networkd.service
      command: start
      enable: true
    - name: settimezone.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Set the time zone
        Requires=network-online.target
        After=network-online.target
        [Service]
        ExecStart=/usr/bin/timedatectl set-timezone America/Sao_Paulo
        RemainAfterExit=yes
        Type=oneshot
    - name: etcd2.service
      command: start
      enable: true
      drop-ins:
      - name: 10-environment.conf
        content: |
          [Service]
          Environment="ETCD_ADVERTISE_CLIENT_URLS=http://200.135.37.93:2379"
          Environment="ETCD_INITIAL_ADVERTISE_PEER_URLS=http://200.135.37.93:2380"
          Environment="ETCD_INITIAL_CLUSTER=coreos-0=http://200.135.37.93:2380,coreos-1=http://200.135.37.94:2380,coreos-2=http://200.135.37.95:2380"
          Environment="ETCD_INITIAL_CLUSTER_STATE=new"
          Environment="ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379"
          Environment="ETCD_LISTEN_PEER_URLS=http://200.135.37.93:2380"
          Environment="ETCD_NAME=coreos-0"
    - name: flanneld.service
      command: start
      enable: true
      drop-ins:
      - name: 40-ExecStartPre-symlink.conf
        content: |
          [Service]
          ExecStartPre=/usr/bin/ln -sf /etc/flannel/options.env /run/flannel/options.env
      - name: 50-network-config.conf
        content: |
          [Service]
          ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{"Network":"10.0.0.0/8","Backend":{"Type":"vxlan"}}'
    - name: docker.service
      command: start
      enable: true
      drop-ins:
      - name: 40-flannel.conf
        content: |
          [Unit]
          Requires=flanneld.service
          After=flanneld.service
    - name: kubelet.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Kubernetes Kubelet
        Documentation=https://github.com/kubernetes/kubernetes
        Documentation=https://github.com/coreos/kubernetes
        Documentation=http://kubernetes.io/docs/getting-started-guides/coreos/bare_metal_calico/
        Requires=docker.service
        After=docker.service
        [Service]
        ExecStartPre=/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/curl http://storage.googleapis.com/kubernetes-release/release/v1.3.0/bin/linux/amd64/kubelet -o /opt/bin/kubelet
        ExecStartPre=/usr/bin/curl http://storage.googleapis.com/kubernetes-release/release/v1.3.0/bin/linux/amd64/kubectl -o /opt/bin/kubectl
        ExecStartPre=/usr/bin/chmod 0755 /opt/bin/kubelet /opt/bin/kubectl
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/addons
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/ssl
        ExecStart=/opt/bin/kubelet \
        --register-node=false \
        --allow-privileged=true \
        --config=/etc/kubernetes/manifests \
        --hostname-override=coreos-0 \
        --cluster-dns=10.1.0.2 \
        --cluster_domain=cluster.local \
        --logtostderr=true
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target
